static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          generate_request_id: true
          tracing:
            operation_name: ingress
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: serviceA
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  timeout: 35s
                  cluster: serviceA-cluster 
                request_headers_to_add:
                  - header:
                      key: "X-Target-IP"
                      value: "%UPSTREAM_METADATA([\"namespace\", \"ip\"])%"
                    append: true
                  - header:
                      key: "X-Target-Group"
                      value: "%UPSTREAM_METADATA([\"namespace\", \"group\"])%"
                    append: true
                metadata:
                  filter_metadata:
                    envoy.lua:
                      X-Target-Group: default
              request_headers_to_add:
                - header:
                    key: "x-request-start"
                    value: "%START_TIME%"
                  append: true
                - header:
                    key: "X-Source-IP"
                    value: "%DOWNSTREAM_LOCAL_ADDRESS_WITHOUT_PORT%"
          http_filters:
          - name: envoy.lua
            config:
              inline_code: |
                local util = require "lib.util"

                function envoy_on_request(request_handle)
                  request_handle:logInfo('front request')
                  request_handle:headers():add("foo", util.foobar())
                  metadata = request_handle:metadata()
                  for key, value in pairs(metadata) do
                    request_handle:logInfo(key..', '..value)
                  end

                  local group = os.getenv("Micro-Service-Component-Group")
                  if group ~= nil then
                    request_handle:headers():add("X-Source-Group", group)
                  end
                end
                function envoy_on_response(response_handle)
                  response_handle:logInfo('front response')
                  body_size = response_handle:body():length()
                  response_handle:headers():add("response-body-size", tostring(body_size))
                end
          - name: envoy.router
            config: {}
  clusters:
  - name: serviceA-cluster
    connect_timeout: 100s
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: serviceA-cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: api_service
                port_value: 80
          # metadata: 
          #   filter_metadata: {"envoy.lua": {"X-Source-Group": "default" }}
          metadata:
            filter_metadata:
              namespace: 
                key: value
                group: "default"
                ip: "123456"
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
